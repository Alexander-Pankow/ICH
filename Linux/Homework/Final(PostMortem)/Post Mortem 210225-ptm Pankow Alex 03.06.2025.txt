#210255-ptm/Pankow-Alexander/03.06.2025


Post Mortem: Восстановление веб-сервера.

Дата инцидента:
3 Июнь 2025 года

Краткое описание:
Веб-сервер с MediaWiki стал недоступен из-за исчерпания дискового пространства. Причиной послужил чрезмерно выросший лог-файл access_log Apache. Сервис httpd остановился, сайт перестал открываться. В процессе восстановления были выполнены действия по очистке диска, настройке конфигурационного файла и исправлению cron-задачи.

Хронология события и команды:

≈9:25 - Проверка работы сайта: (Выходит ошибка и предлагает посмотреть мануал)

   Браузер http://3.70.25.38/

≈9:30 - Подключаемся к серверу: (Звоним системному администратору спрашиваем можем ли мы подключится на сервер при помощи ключей и он нам скидывает приватный ключ который иногда мы должны располагать в определённом месте (тогда пишем ssh -i /tmp/ich.pem ec2-user@3.70.25.38 для амазон ключей) но в нашем случаи ключи были)

   Вводим в консоль: ssh ec2-user@3.70.25.38

≈9:35 - Смотрим наличие ошибок: (Звоним звоним системному администратору и просим разрешения для использования sudo  (запуск одной команды от имени суперпользователя(root) так как наших прав при запуске команд не достаточно что бы определить в чем ошибка)

   Вводим в консоль: cat /var/spool/mail/ec2-user  (ничего не дает, ошибок нет)
                     ls - la /var/spool/mail/  #(78724 ошибок в папке root, для проверки её права и запрашиваем)
                     sudo cat /var/spool/mail/root | tail #(так как ошибок много а памяти мало смотрим только последние 10)

Видим последнюю ошибку что где то пытается работать gzip архиватор но система говорит нет места

≈9:38 - Проверяем сколько свободного места на сервере: (Понимаем что проблема в том что мало свободного места(из за этого клавиша "TAB" не работает, не подтягивает названия.))

   Вводим в консоль: df -h

≈9:40 - Понимаем что без прав суперпользователя дальше не продвинуться запрашиваем их у системного администратора и активируем :

   Вводим в консоль: sudo su

≈9:45 - Проверяем историю команд: видим название архива. До этого мы видили что есть ошибка с работой архиватора. Значит есть автоматическае выполнение задач, идем проверять планировщик.

   Вводим в консоль: history

≈9:45 - Проверяем работу Планировщика:

   Вводим в консоль: crontab -l
   Результат:  * * * * * tar -czf /var/log/httpd/log_$(date +\%Y\%m\%d).tar.gz -C /var/log/httpd . 

Видим есть одна автоматическая задача которая по плану должна архивировать сжатием папку в которой сама же находится с интервалом в минуту.(Причина загрузки памяти найдена)

≈9:50 - Переходим в папку где делается архивация и перезаписываем самый тяжелый файл что бы освободить память что бы запустился crontab:

   Вводим в консоль: cd /var/log/httpd #(путь увидели в history)
                     ls -lh #(смотрим что здесь находится и сколько что весит.)
                     echo "" > access_log #(во избегания ошибок просто самый большой файл перезаписываем пустотой и освобождаем ≈7.0G) 
                     df -h #(проверяем память на диске, теперь свободная память есть)

≈9:55 - Выключем в планеровщике задачу:

   Вводим в консоль: crontab -e #(# * * * * * tar -czf /var/log/httpd/log_$(date +\%Y\%m\%d).tar.gz -C /var/log/httpd . ) 

≈10:00 - Теперь переходим к исправлению ошибки в файле "LocalSettings.php":(Уточняем у системного администратора где находится копия этого файла) но в нашем случае мы видим что наш файл пустой. Так же мы видим что в папке где он находится есть похожий файл но с синтаксической ошибкой и в нем есть основа для нашего файла.

   Вводим в консоль: find / -type f -name "LocalSettings.php" #(ищем наш файл)
                     cd /var/www/html/mediawiki/ | ls -l #(переходим и проверяем директорию)
                     cp LoclSettings.php LocalSettings.php #(копируем данные в наш файл)
                     
≈10:05 - Рестарт сервера: (В скопированных данных был неправильный IP адрес меняем на наш и делаем рестарт)

    Вводим в консоль: nano LocalSettings.php #(меняем IP адрес)
                      service httpd start #(все запускается!)
    Браузер: http://18.192.103.67/
 
≈10:10 - Создание правильного скрипта архивирование логов:

     Вводим в консоль: nano /root/backup.sh

≈10:15 - Выдача прав на выполнение:

     Вводим в консоль: chmod u+x backup.sh

≈10:20 - Добавление cron-задания:

     Вводим в консоль: crontab -e
                       0 0 * * * /root/backup.sh

≈10:20 - Обязательно выходим из root:

     Вводим в консоль: exit


Скрипт backup.sh

#!/bin/bash

LOG_DIR="/var/log/httpd"
LOG_FILE="access_log"
BACKUP_DIR="/var/log/httpd/backups"
MAX_BACKUPS=3

mkdir -p "$BACKUP_DIR"
DATE=$(date +%Y%m%d)
ARCHIVE="$BACKUP_DIR/$LOG_FILE-$DATE.tar.gz"

tar -czf "$ARCHIVE" "LOG_DIR/$LOG_FILE"
echo "" > "$LOG_DIR/$LOG_FILE"
find "$BACKUP_DIR" -type f -name "$LOG_FILE-*.tar.gz" -mtime +3 -exec rm{{}} \;

Извлеченные уроки:


Плюсы:
- Использование резервной копии конфигурации
- Быстрое восстановление сервиса


Минусы:
- Нет logrotate
- Нет мониторинга диска



Рекомендации:

Мониторинг места:
  df -h + mail / alertmanager

Ротация логов:
  sudo yum install logrotate

Проверка cron-задач:
  crontab -l, cat /etc/crontab

Автоматизация:
  bash -n backup_logs.sh и tail -f /var/log/cron



 