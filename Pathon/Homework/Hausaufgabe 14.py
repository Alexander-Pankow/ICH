# 1 Число в конце
# Напишите программу, которая создает новый список.
# В него необходимо добавить только те строки из исходного списка,
# в которых цифры находятся только в конце.
# Данные:
# strings = ["apple23", "ban1ana45", "12cherry", "grape3", "blue23berry"]
# Пример вывода:
# Строки с цифрами только в конце: ['apple23', 'grape3']

# strings = ["apple23", "ban1ana45", "12cherry", "grape3", "blue23berry"]


strings = ["apple23", "ban1ana45", "12cherry", "grape3", "blue23berry"]

result = []

for s in strings:
    i = 0
    # Найдём первую цифру в строке
    while i < len(s) and not s[i].isdigit():
        i += 1
    # Если дошли до цифры, проверим: все символы после неё — цифры?
    if i < len(s) and s[i:].isdigit():
        result.append(s)

print("Строки с цифрами только в конце:", result)



#  2 Удаление кратных
# Напишите программу, которая удаляет из списка все значения,
# кратные числу, которое вводится пользователем.
# Данные:
# numbers = [1, 3, 6, 9, 10, 12, 15, 19, 20]
# Пример вывода:
# Введите число для удаления кратных ему элементов: 3
# Список без кратных значений: [1, 10, 19, 20]

numbers = [1, 3, 6, 9, 10, 12, 15, 19, 20]

divisor = int(input("Введите число для удаления кратных ему элементов: "))

result = []

for n in numbers:
    if n % divisor != 0:
        result.append(n)

print("Список без кратных значений:", result)

# 3 Порядок четных
# Напишите программу, которая формирует новый список чисел.
# Добавьте в него все элементы исходного списка, где:
# нечетные числа занимают те же позиции,
# чётные числа отсортированы между собой обратном порядке.
# Данные:
# numbers = [5, 2, 3, 8, 4, 1, 2, 7]
# Пример вывода:
# Список после сортировки: [5, 8, 3, 4, 2, 1, 2, 7]

numbers = [5, 2, 3, 8, 4, 1, 2, 7]

# Шаг 1: Собираем все чётные числа
evens_unsorted = []
for n in numbers:
    if n % 2 == 0:
        evens_unsorted.append(n)

# Шаг 2: Сортируем чётные числа в обратном порядке
evens = sorted(evens_unsorted, reverse=True)

# Шаг 3: Собираем новый список
result = []
even_index = 0

for n in numbers:
    if n % 2 == 0:
        result.append(evens[even_index])
        even_index += 1
    else:
        result.append(n)