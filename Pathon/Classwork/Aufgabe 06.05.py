# 1 Числа кратные 3 или 5
# Напишите программу, которая создает множество из чисел, фильтруя элементы, не
# кратные 3 или 5.
# Данные:
# numbers = [16, 18, 1, 6, 3, 2, 6, 2, 14, 3, 20, 15, 19, 4, 18, 15, 15, 4, 20, 18]
# Пример вывода:
# {3, 6, 15, 18, 20}

# numbers = [16, 18, 1, 6, 3, 2, 6, 2, 14, 3, 20, 15, 19, 4, 18, 15, 15, 4, 20, 18]
# result = set()
# for num in numbers:
#     if num % 3 == 0 or num % 5 == 0:
#         result.add(num)
# print(result)


# 2 Проверка уникальности ключей
# Напишите программу, которая проверяет, содержатся ли в двух заданных словарях
# одинаковые ключи. Вывести одинаковые ключи или "-", если таковых нет.
# Данные:
# dict1 = {"a": 1, "b": 2, "c": 3}
# dict2 = {"b": 5, "d": 7, "a": 8}
# Пример вывода:
# Общие ключи: ['a', 'b']

# dict1 = {"a": 1, "b": 2, "c": 3}
# dict2 = {"b": 5, "d": 7, "a": 8}
#
# common_keys = []
#
# for key in dict1:
#     if key in dict2:
#         common_keys.append(key)
#
# if common_keys:
#     print("Общие ключи:", common_keys)
# else:
#     print("-")

#Второй вариант с & — оператор пересечения множеств. Он находит только те ключи, которые есть и там, и там.

    # dict1 = {"a": 1, "b": 2, "c": 3}
    # dict2 = {"b": 5, "d": 7, "a": 8}
    #
    # common_keys = set(dict1.keys()) & set(dict2.keys())
    #
    # if common_keys:
    #     print("Общие ключи:", list(common_keys))
    # else:
    #     print("-")


# 3 Строки с длиной
# Напишите программу, которая преобразует список строк в словарь, где ключи —
# сами строки, а значения — их длины.
# Данные:
# words = ["apple", "banana", "cherry", "date"]
# Пример вывода:
# {'apple': 5, 'banana': 6, 'cherry': 6, 'date': 4}

# words = ["apple", "banana", "cherry", "date"]
# result = {}
#
# for word in words:
#     result[word] = len(word)
#
# print(result)
#

# 4 Проверка подмножества
# Напишите программу, которая проверяет, является ли один словарь подмножеством
# другого (т.е. все его пары "ключ-значение" содержатся в другом словаре).
# Данные:
# dict1 = {"a": 1, "b": 2}
# dict2 = {"a": 1, "b": 2, "c": 3}
# Пример вывода:
# Первый словарь является подмножеством второго.

# dict1 = {"a": 1, "b": 2}
# dict2 = {"a": 1, "b": 2, "c": 3}
#
# is_subset = True
#
# for key in dict1:
#     if key not in dict2 or dict1[key] != dict2[key]:
#         is_subset = False
#         break
#
# if is_subset:
#     print("Первый словарь является подмножеством второго.")
# else:
#     print("Первый словарь не является подмножеством второго.")



#  5 Удаление пустых значений
# Напишите программу, которая удаляет из словаря все пары "ключ-значение", где
# значение пустое (например, None, пустая строка или пустой список).
# Данные:
# data = {"a": None, "b": 2, "c": "", "d": [], "e": [1, 2]}
# Пример вывода:
# {'b': 2, 'e': [1, 2]}

# data = {"a": None, "b": 2, "c": "", "d": [], "e": [1, 2]}
# result = {}
#
# for key, value in data.items():
#     if value:  # проверяет, что значение не пустое
#         result[key] = value
#
# print(result)


# 6 Потерянные страницы книги
# Вам дан словарь, где ключи — номера страниц книги, а значения — содержимое
# страниц. Некоторые страницы отсутствуют (значения None). Напишите программу,
# которая на пропущенных страницах заменит значение на "Страница потеряна".
# Данные:
# book = {1: "Начало истории", 2: None, 3: "Глава 1", 4: None, 5: "Глава 2"}
# Пример вывода:
#{1: 'Начало истории', 2: 'Страница потеряна', 3: 'Глава 1', 4: 'Страница потеряна', 5: 'Глава 2'}

# book = {1: "Начало истории", 2: None, 3: "Глава 1", 4: None, 5: "Глава 2"}
#
# for page in book:
#     if book[page] is None:
#         book[page] = "Страница потеряна"
#
# print(book)

# 7 База оценок студентов
# У вас есть словарь с именами студентов и списками их оценок. Напишите
# программу, которая вычисляет средний балл для каждого студента. Далее нужно
# сохранить средний балл в значениях для каждого студента, как показано на
# примере.
# Данные:
# grades = {
#  "anna": [5, 4, 3, 5],
#  "bennet": [3, 2, 4],
#  "john": [5, 5, 5]
# }
# Пример вывода:
# {'anna': {'оценки': [5, 4, 3, 5], 'средний балл': 4.25}, 'bennet': {'оценки':
# [3, 2, 4], 'средний балл': 3.0}, 'john': {'оценки': [5, 5, 5], 'средний балл':
# 5.0}}

# grades = {
#     "anna": [5, 4, 3, 5],
#     "bennet": [3, 2, 4],
#     "john": [5, 5, 5]
# }
#
# result = {}
#
# for student, marks in grades.items():
#     average = sum(marks) / len(marks)  # вычисляем средний балл
#     result[student] = {
#         "оценки": marks,
#         "средний балл": average
#     }
#
# print(result)

# 2 вариант

# grades = {
#  "anna": [5, 4, 3, 5],
#  "bennet": [3, 2, 4],
#  "john": [5, 5, 5]
# }
#
# for key, value in grades.items():
#     print(f"{key}: оценки: {value}, средний балл: {sum(value)/len(value)}")

# 8 Рецепты по ингредиентам
# Создайте словарь, в котором для каждого набора ингредиентов будут храниться все
# названия рецептов.
# Учитывайте что ингредиенты могут быть перечислены в произвольном порядке и
# некоторые рецепты могут иметь одинаковые ингредиенты.
# Выведите возможные рецепты для каждого набора продуктов.
# В конце пользователь вводит список имеющихся у него ингредиентов через пробел,
# и программа должна вывести названия всех доступных рецептов. Если рецептов нет,
# нужно вывести сообщение "Нет рецептов".
# Данные:
# recipes = {
#  ("flour", "egg", "milk"): "Pancakes",
#  ("egg", "milk", "butter"): "Omelette",
#  ("flour", "sugar", "butter"): "Cookies",
#  ("flour", "egg", "butter", "sugar"): "Cake",
#  ("milk", "flour", "egg"): "Waffles",
#  ("butter", "milk", "egg"): "Scrambled Eggs",
#  ("flour", "milk", "sugar", "butter"): "Sweet Bread"
# }
# Пример вывода:
# milk egg butter flour

# Исходные рецепты
# Исходные рецепты
# recipes = {
#     ("flour", "egg", "milk"): "Pancakes",
#     ("egg", "milk", "butter"): "Omelette",
#     ("flour", "sugar", "butter"): "Cookies",
#     ("flour", "egg", "butter", "sugar"): "Cake",
#     ("milk", "flour", "egg"): "Waffles",
#     ("butter", "milk", "egg"): "Scrambled Eggs",
#     ("flour", "milk", "sugar", "butter"): "Sweet Bread"
# }
#
# # Группируем рецепты по отсортированному набору ингредиентов
# recipe_dict = {}
#
# for ingredients, name in recipes.items():
#     key = tuple(sorted(ingredients))
#     if key in recipe_dict:
#         recipe_dict[key].append(name)
#     else:
#         recipe_dict[key] = [name]
#
# # Ввод пользователя
# user_input = input("Введите ингредиенты через пробел: ")
# user_ingredients = tuple(sorted(user_input.strip().split()))
#
# # Поиск и вывод рецептов
# if user_ingredients in recipe_dict:
#     print("Возможные рецепты:")
#     for recipe in recipe_dict[user_ingredients]:
#         print("-", recipe)
# else:
#     print("Нет рецептов")


# 9 Одинаковые предметы
# Есть список студентов и наборы предметов, которые они изучают.
# Необходимо сгруппировать студентов по идентичным наборам предметов,
# используя frozenset как ключ, и вывести группы.
# Данные:
# students = {
#  "Alice": ["Math", "Physics"],
#  "Bob": ["Math", "Physics"],
#  "Charlie": ["Chemistry", "Biology"],
# Unset
# Python
# Unset
#  "David": ["Math", "Physics"],
#  "Eve": ["Chemistry", "Biology"]
# }
# Пример вывода:
# Группа с предметами: Physics, Math: ['Alice', 'Bob', 'David']
# Группа с предметами: Biology, Chemistry: ['Charlie', 'Eve']




# 10 Перевод и расширение словаря
# Напишите программу, которая позволяет пользователю вводить английские слова и
# получать их перевод на русский из словаря. Если слово отсутствует в словаре,
# программа должна выводить сообщение "Перевод отсутствует".
# В конце программа должна предложить пользователю добавить новые слова в
# словарь.
# Данные:
# english_words = {
#  "Butterfly": "Бабочка",
#  "Training": "Обучение",
#  "Restaurant": "Ресторан",
#  "Programming": "Программирование",
# }
# Пример вывода:
# Введите слово на английском (или 'exit' для выхода): Butterfly
# Перевод: Бабочка
# Введите слово на английском (или 'exit' для выхода): Travel
# Перевод отсутствует.
# Хотите добавить перевод? (да/нет): да
# Введите перевод для слова "Travel": Путешествие
# Слово "Travel" добавлено в словарь.
# Введите слово на английском (или 'exit' для выхода): exit
# Программа завершена.


# 11  Проверка знака числа
# Напишите функцию, которая принимает число и возвращает,
# является ли оно положительным, отрицательным или нулём.
# Данные:
# num = -3
# Пример вывода:
# Число отрицательное
# num = -3
#
# def negative_or_positive(num):
#     if num < 0:
#         print("Число отрицательное")
#     elif num > 0:
#         print("Число положительное")
#     else:
#         print("Число равно 0")
#
# negative_or_positive(num)



# 12  Создайте функцию filter_strings, которая принимает целое число n и любое количество строк
# (по отдельности, а не как коллекция).
# Функция должна возвращать список строк, длина которых больше n.
# Данные:
# strings = ["apple", "banana", "cherry", "date", "fig"]
# n = 5
# Пример вывода:
# ['banana', 'cherry']

strings = ["apple", "banana", "cherry", "date", "fig"]
 n = 5

def filter_strings(strings, n = 5):