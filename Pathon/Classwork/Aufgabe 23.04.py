#  1 Номер покупки
# Задача: Дан список покупок. Найдите какой по счету (начиная с единицы) товар с
# названием "Milk". Если товара нет, выведите сообщение об отсутствии.
# Данные: products = ["Bread", "Butter", "Cheese", "Milk", "Eggs"]
# Пример вывода: Товар "Milk" в списке покупок: 4

# products = ["Bread", "Butter", "Cheese", "Milk", "Eggs"]
#
# if "Milk" in products:
#     position = products.index("Milk") + 1  # +1, так как счет с единицы
#     print(f'Товар "Milk" в списке покупок: {position}')
# else:
#     print('Товар "Milk" отсутствует в списке покупок')
#


# 2 Список уникальных слов
# Задача: Дан текст. Программа должна:
# ● Разбить текст на слова.
# ● Создать список уникальных слов в алфавитном порядке (не учитывая
# регистр).
# ● Вывести количество уникальных слов.
# Данные: text = "Python is a great programming language. Python is popular and
# powerful."
# Пример вывода: Количество уникальных слов: 9 Уникальные слова: ['a', 'and', 'great',
# 'is', 'language', 'popular', 'powerful', 'programming', 'python']

text = "Python is a great programming language. Python is popular and powerful.".split()
out = []

for i in text:
    tmp = i.strip(".").lower()
    if tmp not in out:
        out.append(tmp)

print("Количество уникальных слов:", len(out), "Уникальные слова:", sorted(out))


# 3 Самое длинное слово
# Задача: Дано предложение. Найдите самое длинное слово и выведите это слово с
# его длиной.
# Данные: sentence = "Programming in Python is both fun and educational"
# Пример вывода: Самое длинное слово: Programming Длина слова: 11




#  4 Перемещение в конец
# Задача: Напишите программу, которая перемещает все элементы списка, меньше 5,
# в конец списка, сохраняя порядок остальных элементов.
# Данные: numbers = [4, 7, 1, 6, 3, 8, 2]
# Пример вывода: Перемещённые элементы: [6, 7, 8, 4, 1, 3, 2]


# 5 Суммы пар
# Задача: Напишите программу, которая обрабатывает список чисел и возвращает
# новый список, содержащий все возможные суммы пар разных элементов без
# дубликатов значений. Результат должен быть отсортирован по убыванию.
# Данные: numbers = [3, 5, 9]
# Пример вывода: Суммы пар чисел по убыванию: [14, 12, 8]


# 6 Покупки с лимитом бюджета
# Задача: Дан список покупок, где каждый элемент — это кортеж с названием товара
# и его ценой. Покупки распределены по приоритетности. Пользователь вводит
# бюджет. Программа должна вывести:
# ● список покупок, которые он может себе позволить;
# ● итоговую стоимость этих товаров.
# Данные: shopping_list = [ ("Bread", 1.20), ("Milk", 0.99), ("Eggs", 2.50), ("Butter", 3.75),
# ("Cheese", 4.10), ("Apple", 0.50) ]
# Пример вывода: Введите ваш бюджет: 7
# Покупки в рамках бюджета: Bread: $1.20 Milk: $0.99 Eggs: $2.50 Apple: $0.50
# Итоговая стоимость: $5.19

# 7 Упаковка товаров по ящикам
# Задача: У вас есть список весов товаров. Каждый ящик может выдержать не более
# заданного веса. Напишите программу, которая распределяет товары по
# минимальному количеству ящиков, не превышая допустимый вес.
# Данные: weights = [3, 4, 9, 8, 2, 5, 3, 6, 1, 7, 1, 1, 2, 4]
# Пример вывода: Введите максимальный вес ящика: 10 Распределение по ящикам:
# Ящик 1: [9, 1] Ящик 2: [8, 2] Ящик 3: [7, 3] Ящик 4: [6, 4] Ящик 5: [5, 4, 1] Ящик 6: [3, 2, 1]



# 8 Оценки студентов
# Задача: Дан список студентов, где каждый элемент — это кортеж с именем студента
# и его оценками. Программа должна вывести их имена и средний балл в виде
# таблицы. Используйте форматирование для выравнивания колонок.
# Данные: students = [ ("Alice", [85, 90, 78]), ("Bob", [88, 76, 92]), ("Charlie", [90, 87, 85]),
# ("Diana", [72, 80, 65]) ]
# Пример вывода: Имя Средний балл Alice 84.33 Bob 85.33 Charlie 87.33 Diana 72.33


#  9 Новая задача
# Задача: Дан список сотрудников, где каждый элемент — это кортеж с именем и
# списком задач. Добавьте новую задачу "Prepare presentation" к сотруднику с именем
# "Alice" и отобразите её текущие задачи.
# Данные: employees = [ ("Alice", ["Review documents", "Call clients"]), ("Bob", ["Check
# emails"]), ("Charlie", ["Organize meeting"]) ]
# Пример вывода: Список задач Alice: ['Review documents', 'Call clients', 'Prepare
# presentation']


# 10 Перестановка элементов
# Задача: Дан список проектов, где каждый элемент — это кортеж с названием
# проекта и списком сотрудников. Поменяйте местами сотрудников "Alice" и "Bob" в
# проекте "Project A" и отобразите их список.
# Данные: projects = [ ("Project A", ["Alice", "Bob", "Charlie"]), ("Project B", ["Diana",
# "Eve"]) ]
# Пример вывода: Список сотрудников Project A после изменения: ['Bob', 'Alice',
# 'Charlie']



# 11 Приходы и расходы
# Задача: В списке кортежей, где каждый кортеж символизирует запись о приходах и
# расходах, необходимо оставить только те записи, в которых общий баланс не уходит
# в минус (сумма элементов кортежа должна быть больше или равна нулю).
# Необходимо изменить исходный список, а не создать новый.
# Данные: transactions = [(100, -50, -30), (-200, 100, 50), (300, -100, -50), (-50, -50),
# (200, -300, 150)]
# Пример вывода: Обновлённый список: [(100, -50, -30), (300, -100, -50), (200, -300,
# 150)]



# 12 Номер покупки
# Задача: Дан список покупок. Найдите какой по счету (начиная с единицы) товар с
# названием "Milk". Если товара нет, выведите сообщение об отсутствии.
# Данные: products = ["Bread", "Butter", "Cheese", "Milk", "Eggs"]
# Пример вывода: Товар "Milk" в списке покупок: 4



# 13 Список уникальных слов
# Задача: Дан текст. Программа должна:
# ● Разбить текст на слова.
# ● Создать список уникальных слов в алфавитном порядке (не учитывая регистр).
# ● Вывести количество уникальных слов.
# Данные: text = "Python is a great programming language. Python is popular and powerful."
# Пример вывода: Количество уникальных слов: 9 Уникальные слова: ['a', 'and', 'great', 'is',
# 'language', 'popular', 'powerful', 'programming', 'python']


# 14 Самое длинное слово
# Задача: Дано предложение. Найдите самое длинное слово и выведите это слово с его
# длиной.
# Данные: sentence = "Programming in Python is both fun and educational"
# Пример вывода: Самое длинное слово: Programming Длина слова: 11



# 15 Перемещение в конец
# Задача: Напишите программу, которая перемещает все элементы списка, меньше 5, в
# конец списка, сохраняя порядок остальных элементов.
# Данные: numbers = [4, 7, 1, 6, 3, 8, 2]
# Пример вывода: Перемещённые элементы: [6, 7, 8, 4, 1, 3, 2]


# 16 Суммы пар
# Задача: Напишите программу, которая обрабатывает список чисел и возвращает новый
# список, содержащий все возможные суммы пар разных элементов без дубликатов
# значений. Результат должен быть отсортирован по убыванию.
# Данные: numbers = [3, 5, 9]
# Пример вывода: Суммы пар чисел по убыванию: [14, 12, 8]


# 17 Покупки с лимитом бюджета
# Задача: Дан список покупок, где каждый элемент — это кортеж с названием товара и его
# ценой. Покупки распределены по приоритетности. Пользователь вводит бюджет.
# Программа должна вывести:
# ● список покупок, которые он может себе позволить;
# ● итоговую стоимость этих товаров.
# Данные: shopping_list = [ ("Bread", 1.20), ("Milk", 0.99), ("Eggs", 2.50), ("Butter", 3.75),
# ("Cheese", 4.10), ("Apple", 0.50) ]
# Пример вывода: Введите ваш бюджет: 7
# Покупки в рамках бюджета: Bread: $1.20 Milk: $0.99 Eggs: $2.50 Apple: $0.50
# Итоговая стоимость: $5.19



# 18 Упаковка товаров по ящикам
# Задача: У вас есть список весов товаров. Каждый ящик может выдержать не более
# заданного веса. Напишите программу, которая распределяет товары по минимальному
# количеству ящиков, не превышая допустимый вес.
# Данные: weights = [3, 4, 9, 8, 2, 5, 3, 6, 1, 7, 1, 1, 2, 4]
# Пример вывода: Введите максимальный вес ящика: 10 Распределение по ящикам: Ящик
# 1: [9, 1] Ящик 2: [8, 2] Ящик 3: [7, 3] Ящик 4: [6, 4] Ящик 5: [5, 4, 1] Ящик 6: [3, 2, 1]


# 19 Последовательность цифр
# Задача: Напишите программу, которая проверяет, находятся ли цифры, введённые
# пользователем, в заданном списке строк в указанном порядке.
# Данные: my_list = ["3", "6", "3", "2", "9", "3", "9", "4", "3", "9", "0"]
# Пример вывода: Введите последовательность цифр для проверки: 943 Результат: True





# 20 Зашифрованное послание
# Задача: Есть строка с зашифрованным посланием. Всё, что было приложено к этой
# строке - это небольшой набор слов: "ave caesar-dyh#fdhvdu" Кажется нам было
# отправлено сообщение по шифру Цезаря. Его принцип - сдвиг каждой буквы вправо по
# алфавиту на одинаковое количество символов. Нужно расшифровать послание и вывести
# найденный сдвиг и послание на экран.
# Данные: message = "92 114 120 35 102 100 113 35 103 114 35 108 119 36 35 92 114 120 35
# 100 117 104 35 106 117 104 100 119 35 100 113 103 35 76 35 101 104 111 108 104 121 104
# 35 108 113 35 124 114 120 36"
# Пример вывода: Сдвиг: 3 Послание: You can do it! You are great and I believe in you!





# Замена слов на основе условий.
#
# Если длина слова больше 5 символов, оставить его без изменений. Если длина слова от 3 до 5 символов,
# заменить слово на 'medium'. Если длина слова меньше 3 символов, заменить его на 'short'.


words = ["hi", "apple", "banana", "cat", "blueberry", "on"]

n_words = [word if len(word) > 5 else len(word) = 3-5 'medium' else len(word) < 3 'short' for word in words]

print(n_words)


words =  ["hi","banane","cat","applepie","ananas","on"]
words_new =  [word if len(word) > 5 else 'short' if len(word) < 3 else 'medium' for word in words]
print(words_new)


# Использование в цикле for
names = ["Alice", "Bob", "Charlie"]
ages = [25, 30, 35]
# [('Alice', 25), ('Bob', 30), ('Charlie', 35)]
print(zip(names, ages))

for name, age in zip(names, ages):
    print(name + str(age))
    print(f"{name} is {age} years old.")

    code = '''
    names = ["Alice", "Bob", "Charlie"]
    ages = [25, 30, 35]

    for name, age in zip(names, ages):
        hex_age = format(age, 'x')
        print(f"{name} - hex age: {hex_age}")
        print(f"{name} is {hex_age} years old.")
    '''

    # Конвертация текста в байты, затем в hex
    hex_output = code.encode('utf-8').hex()

    print(hex_output)